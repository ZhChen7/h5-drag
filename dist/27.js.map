{"version":3,"sources":["webpack:///./src/components/BasicShop/VisualComponents/Line/index.less","webpack:///./src/components/BasicShop/VisualComponents/Line/index.tsx","webpack:///./src/assets/line.png"],"names":["XLine","props","isTpl","data","color","size","paddingTop","title","chartRef","useRef","useEffect","chart","Chart","el","current","undefined","pixelRatio","window","devicePixelRatio","dataX","map","item","value","Number","source","tickCount","min","tooltip","showCrosshairs","showItemMarker","axis","label","text","index","total","textCfg","textAlign","line","position","point","style","stroke","lineWidth","render","styles","chartWrap","chartTitle","fontSize","LineImg","memo"],"mappings":"iFACA,EAAO,QAAU,CAAC,UAAY,oBAAoB,WAAa,uB,6ICWzDA,EAASC,IAAuB,GAC5BC,GAAgDD,EAAhDC,MAAOC,EAAyCF,EAAzCE,KAAMC,EAAmCH,EAAnCG,MAAOC,EAA4BJ,EAA5BI,KAAMC,EAAsBL,EAAtBK,WAAYC,EAAUN,EAAVM,MACxCC,EAAWC,iBAAO,MACxBC,2BAAU,KACR,GAAI,CAACR,GACH,GAAMS,GAAQ,GAAIC,SAAM,CACtBC,GAAIL,EAASM,SAAWC,OACxBC,WAAYC,OAAOC,mBAIfC,EAAQhB,EAAKiB,IAAIC,GAAQ,YAAC,eAAKA,GAAV,IAAgBC,MAAOC,OAAOF,EAAKC,UAG9DX,EAAMa,OAAOL,EAAO,CAClBG,MAAO,CACLG,UAAW,EACXC,IAAK,KAITf,EAAMgB,QAAQ,CACZC,eAAgB,GAChBC,eAAgB,KAGlBlB,EAAMmB,KAAK,OAAQ,CACjBC,MAAO,SAAeC,EAAMC,EAAOC,GACjC,GAAMC,GAAe,GACrB,MAAIF,KAAU,EACZE,EAAQC,UAAY,OACXH,IAAUC,EAAQ,GAC3BC,GAAQC,UAAY,SAEfD,KAIXxB,EAAM0B,OAAOC,SAAS,cACtB3B,EACG4B,QACAD,SAAS,cACTE,MAAM,CACLC,OAAQ,OACRC,UAAW,IAGf/B,EAAMgC,WAEP,CAACxC,EAAMD,IAER,yBAAK,UAAW0C,IAAOC,WACrB,yBAAK,UAAWD,IAAOE,WAAY,MAAO,CAAE1C,QAAO2C,SAAU1C,EAAMC,eAChEC,GAEFL,EAAQ,yBAAK,IAAK8C,IAAS,IAAI,kBAAqB,4BAAQ,IAAKxC,MAKzDyC,yBAAKjD,I,qBCxEpB,EAAO,QAAU,IAA0B","file":"27.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chartWrap\":\"chartWrap___1z6B5\",\"chartTitle\":\"chartTitle___3z8R_\"};","import { Chart } from '@antv/f2';\nimport React, { memo, useEffect, useRef } from 'react';\n// import { uuid } from 'utils/tool';\nimport LineImg from '@/assets/line.png';\n\nimport styles from './index.less';\nimport { IChartConfig } from './schema';\n\ninterface XChartProps extends IChartConfig {\n  isTpl: boolean;\n}\n\nconst XLine = (props: XChartProps) => {\n  const { isTpl, data, color, size, paddingTop, title } = props;\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (!isTpl) {\n      const chart = new Chart({\n        el: chartRef.current || undefined,\n        pixelRatio: window.devicePixelRatio, // 指定分辨率\n      });\n\n      // step 2: 处理数据\n      const dataX = data.map(item => ({ ...item, value: Number(item.value) }));\n\n      // Step 2: 载入数据源\n      chart.source(dataX, {\n        value: {\n          tickCount: 5,\n          min: 0,\n        },\n      });\n\n      chart.tooltip({\n        showCrosshairs: true,\n        showItemMarker: false,\n      });\n\n      chart.axis('name', {\n        label: function label(text, index, total) {\n          const textCfg: any = {};\n          if (index === 0) {\n            textCfg.textAlign = 'left';\n          } else if (index === total - 1) {\n            textCfg.textAlign = 'right';\n          }\n          return textCfg;\n        },\n      });\n\n      chart.line().position('name*value');\n      chart\n        .point()\n        .position('name*value')\n        .style({\n          stroke: '#fff',\n          lineWidth: 1,\n        });\n\n      chart.render();\n    }\n  }, [data, isTpl]);\n  return (\n    <div className={styles.chartWrap}>\n      <div className={styles.chartTitle} style={{ color, fontSize: size, paddingTop }}>\n        {title}\n      </div>\n      {isTpl ? <img src={LineImg} alt=\"dooring chart\" /> : <canvas ref={chartRef}></canvas>}\n    </div>\n  );\n};\n\nexport default memo(XLine);\n","module.exports = __webpack_public_path__ + \"static/line.95d1bfba.png\";"],"sourceRoot":""}