{"version":3,"sources":["webpack:///./src/components/BasicShop/VisualComponents/Area/index.less","webpack:///./src/assets/area.png","webpack:///./src/components/BasicShop/VisualComponents/Area/index.tsx"],"names":["XLine","props","isTpl","data","color","size","paddingTop","title","chartRef","useRef","useEffect","chart","Chart","el","current","undefined","pixelRatio","window","devicePixelRatio","dataX","map","item","value","Number","a","source","percent","formatter","val","tooltip","showCrosshairs","scale","name","range","tickCount","min","axis","label","text","index","total","textCfg","textAlign","area","position","line","render","styles","chartWrap","chartTitle","fontSize","AreaImg","memo"],"mappings":"+EACA,EAAO,QAAU,CAAC,UAAY,oBAAoB,WAAa,uB,qBCD/D,EAAO,QAAU,IAA0B,4B,6ICYrCA,EAASC,IAAuB,GAC5BC,GAAgDD,EAAhDC,MAAOC,EAAyCF,EAAzCE,KAAMC,EAAmCH,EAAnCG,MAAOC,EAA4BJ,EAA5BI,KAAMC,EAAsBL,EAAtBK,WAAYC,EAAUN,EAAVM,MACxCC,EAAWC,iBAAO,MACxBC,2BAAU,KACR,GAAI,CAACR,GACH,GAAMS,GAAQ,GAAIC,SAAM,CACtBC,GAAIL,EAASM,SAAWC,OACxBC,WAAYC,OAAOC,mBAIfC,EAAQhB,EAAKiB,IAAIC,GAAQ,YAAC,eAAKA,GAAV,IAAgBC,MAAOC,OAAOF,EAAKC,OAAQE,EAAG,OAGzEb,EAAMc,OAAON,EAAO,CAClBO,QAAS,CACPC,UAAW,SAAmBC,GAC5B,MAAOA,GAAM,IAAM,QAKzBjB,EAAMkB,QAAQ,CACZC,eAAgB,KAGlBnB,EAAMoB,MAAM,CACVC,KAAM,CACJC,MAAO,CAAC,EAAG,IAEbX,MAAO,CACLY,UAAW,EACXC,IAAK,KAITxB,EAAMyB,KAAK,OAAQ,CACjBC,MAAO,SAAeC,EAAMC,EAAOC,GACjC,GAAMC,GAAe,GACrB,MAAIF,KAAU,EACZE,EAAQC,UAAY,OACXH,IAAUC,EAAQ,GAC3BC,GAAQC,UAAY,SAEfD,KAIX9B,EAAMgC,OAAOC,SAAS,cACtBjC,EAAMkC,OAAOD,SAAS,cACtBjC,EAAMmC,WAEP,CAAC3C,EAAMD,IAER,yBAAK,UAAW6C,IAAOC,WACrB,yBAAK,UAAWD,IAAOE,WAAY,MAAO,CAAE7C,QAAO8C,SAAU7C,EAAMC,eAChEC,GAEFL,EAAQ,yBAAK,IAAKiD,IAAS,IAAI,kBAAqB,4BAAQ,IAAK3C,MAKzD4C,yBAAKpD","file":"25.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chartWrap\":\"chartWrap___2C8gc\",\"chartTitle\":\"chartTitle___syciX\"};","module.exports = __webpack_public_path__ + \"static/area.cd1c6849.png\";","import { Chart } from '@antv/f2';\nimport React, { memo, useEffect, useRef } from 'react';\n// import { uuid } from 'utils/tool';\nimport AreaImg from '@/assets/area.png';\n\nimport styles from './index.less';\nimport { IChartConfig } from './schema';\n\ninterface XChartProps extends IChartConfig {\n  isTpl: boolean;\n}\n\nconst XLine = (props: XChartProps) => {\n  const { isTpl, data, color, size, paddingTop, title } = props;\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (!isTpl) {\n      const chart = new Chart({\n        el: chartRef.current || undefined,\n        pixelRatio: window.devicePixelRatio, // 指定分辨率\n      });\n\n      // step 2: 处理数据\n      const dataX = data.map(item => ({ ...item, value: Number(item.value), a: '1' }));\n\n      // Step 2: 载入数据源\n      chart.source(dataX, {\n        percent: {\n          formatter: function formatter(val) {\n            return val * 100 + '%';\n          },\n        },\n      });\n\n      chart.tooltip({\n        showCrosshairs: true,\n      });\n\n      chart.scale({\n        name: {\n          range: [0, 1],\n        },\n        value: {\n          tickCount: 5,\n          min: 0,\n        },\n      });\n\n      chart.axis('name', {\n        label: function label(text, index, total) {\n          const textCfg: any = {};\n          if (index === 0) {\n            textCfg.textAlign = 'left';\n          } else if (index === total - 1) {\n            textCfg.textAlign = 'right';\n          }\n          return textCfg;\n        },\n      });\n\n      chart.area().position('name*value');\n      chart.line().position('name*value');\n      chart.render();\n    }\n  }, [data, isTpl]);\n  return (\n    <div className={styles.chartWrap}>\n      <div className={styles.chartTitle} style={{ color, fontSize: size, paddingTop }}>\n        {title}\n      </div>\n      {isTpl ? <img src={AreaImg} alt=\"dooring chart\" /> : <canvas ref={chartRef}></canvas>}\n    </div>\n  );\n};\n\nexport default memo(XLine);\n"],"sourceRoot":""}