{"version":3,"sources":["webpack:///./src/components/BasicShop/VisualComponents/Chart/index.less","webpack:///./src/assets/chart.png","webpack:///./src/components/BasicShop/VisualComponents/Chart/index.tsx"],"names":["XChart","props","isTpl","data","color","size","paddingTop","title","chartRef","useRef","useEffect","chart","Chart","el","current","undefined","pixelRatio","window","devicePixelRatio","dataX","map","item","value","Number","source","interval","position","render","styles","chartWrap","chartTitle","fontSize","ChartImg","memo"],"mappings":"iFACA,EAAO,QAAU,CAAC,UAAY,oBAAoB,WAAa,uB,qBCD/D,EAAO,QAAU,IAA0B,6B,6ICYrCA,EAAUC,IAAuB,GAC7BC,GAAgDD,EAAhDC,MAAOC,EAAyCF,EAAzCE,KAAMC,EAAmCH,EAAnCG,MAAOC,EAA4BJ,EAA5BI,KAAMC,EAAsBL,EAAtBK,WAAYC,EAAUN,EAAVM,MACxCC,EAAWC,iBAAO,MACxBC,2BAAU,KACR,GAAI,CAACR,GACH,GAAMS,GAAQ,GAAIC,SAAM,CACtBC,GAAIL,EAASM,SAAWC,OACxBC,WAAYC,OAAOC,mBAIfC,EAAQhB,EAAKiB,IAAIC,GAAQ,YAAC,eAAKA,GAAV,IAAgBC,MAAOC,OAAOF,EAAKC,UAG9DX,EAAMa,OAAOL,GAGbR,EACGc,WACAC,SAAS,cACTtB,MAAM,QAGTO,EAAMgB,WAEP,CAACxB,EAAMD,IAER,yBAAK,UAAW0B,IAAOC,WACrB,yBAAK,UAAWD,IAAOE,WAAY,MAAO,CAAE1B,QAAO2B,SAAU1B,EAAMC,eAChEC,GAEFL,EAAQ,yBAAK,IAAK8B,IAAU,IAAI,kBAAqB,4BAAQ,IAAKxB,MAK1DyB,yBAAKjC","file":"26.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chartWrap\":\"chartWrap___V0N8w\",\"chartTitle\":\"chartTitle___Rz1uP\"};","module.exports = __webpack_public_path__ + \"static/chart.e0cb218c.png\";","import { Chart } from '@antv/f2';\nimport React, { memo, useEffect, useRef } from 'react';\n// import { uuid } from 'utils/tool';\nimport ChartImg from '@/assets/chart.png';\n\nimport styles from './index.less';\nimport { IChartConfig } from './schema';\n\ninterface XChartProps extends IChartConfig {\n  isTpl: boolean;\n}\n\nconst XChart = (props: XChartProps) => {\n  const { isTpl, data, color, size, paddingTop, title } = props;\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (!isTpl) {\n      const chart = new Chart({\n        el: chartRef.current || undefined,\n        pixelRatio: window.devicePixelRatio, // 指定分辨率\n      });\n\n      // step 2: 处理数据\n      const dataX = data.map(item => ({ ...item, value: Number(item.value) }));\n\n      // Step 2: 载入数据源\n      chart.source(dataX);\n\n      // Step 3：创建图形语法，绘制柱状图，由 genre 和 sold 两个属性决定图形位置，genre 映射至 x 轴，sold 映射至 y 轴\n      chart\n        .interval()\n        .position('name*value')\n        .color('name');\n\n      // Step 4: 渲染图表\n      chart.render();\n    }\n  }, [data, isTpl]);\n  return (\n    <div className={styles.chartWrap}>\n      <div className={styles.chartTitle} style={{ color, fontSize: size, paddingTop }}>\n        {title}\n      </div>\n      {isTpl ? <img src={ChartImg} alt=\"dooring chart\" /> : <canvas ref={chartRef}></canvas>}\n    </div>\n  );\n};\n\nexport default memo(XChart);\n"],"sourceRoot":""}